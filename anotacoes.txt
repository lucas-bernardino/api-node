Para iniciar o projeto, rodamos:
yarn init
yarn add express
yarn add -D typescript @types/express ts-node-dev

Esse @types/express foi preciso devido ao typescript e o ts-node-dev serve para 
o node executar arquivos typescript. Lembrando que não é recomendável utilizá-lo em 
produção, somente em desenvolvimento.

Adicionamos também a biblioteca dotenv para manipular variáveis de ambiente

Rodamos yarn tsc --init
Esse código inicia o tsconfig.json e ao rodar yarn tsc, todos os arquivos typescript sao convertidos para javascript de modo que o node consiga executar os arquivos em forma de javascript. Importante colocar o /build gitignore

O tipo Record, no typescript, permite que voce inicialize um dicionario em que voce 
não sabe quantos keys e values ele terá. 
Sintaxe: const myObj: Record<string, string> = {}

Os middlewares são funções que auxiliam os controllers. Eles funcionam como intermediario entre o recebimento da API 
e o método da controller. Por exemplo, uma função que é responsável por validar os dados (como utilizando o YUP) pode 
ser usada como um middleware. Elas também tem acesso ao req, res e se não forem a ultima função no ciclo, precisam 
chamar o next() para chamar a próxima função de middleware.

O comando:
yarn add jest ts-jest @types/jest 
esse comando instala o jest e depois roda yarn jest --init 

Apos inicializar o jest, foi modificado alguns parametros no arquivo jest.config.ts, como o 
coverageReporters, setupFilesAfterEnv, testMatch, transform

Foi criado o arquivo de tests jest.setup.ts dentro da pasta tests. Para automatizar a incialização do 
servidor, foi instalada a biblioteca supertest, que importa o Server e inicia os testes

Estava dando um conflito no tsconfig.json. Para resolver, precisou incluir o parametro "exclude"



Para fazer a configuração do deploy, adicionamos o "postinstall": "tsc" e
"production": "node ./build/index.js" para eles instalar as dependencias e dar o build quando for pro deploy
tambem adicionamos o "engines" com o node na versao 20.x 


No banco de dados, vamos usar o knex. No modo desenvolvimento, utilizamos o sqlite para um esboco de como 
será. Porém, em producao nao se usa ele. Fizemos as configuracoes inicias do knex na pasta database

Fizemos algumas alteracoes no package.json que automatiza os scripts para rodar as migrations


As providers são responsáveis por criar registros no banco, atualizar, consultar etc. Parecido com o que
as controllers já fazem. Porém, as providers escrevem diretamente no banco de dados. Além disso,
caso queira mudar o banco de dados usado, é só mudar e implementar a nova lógica na pasta providers.

As funções das providers são async e retornam uma Promise, já que interagem com o bando de dados e 
podem levar tempo para completar ação, fazendo com que o código possa esperar o resultado da ação sem bloquear
a thread principal.



O deploy no render integrado ao sqlite funcionou após fazer colocar o sqlite (no package.json) como 
dependencias de produção ao invés de dependencias de desenvolvimento.



Quando criamos a parte do usuario, especialmente na parte do signIn, temos que mandar os dados, como email e senha, no 
body da chamada, pois todo site que possui SSL há a criptografia desses dados, de modo que eles são protegidos na conexão
entre cliente e servidor.


Criptografia: instalamos o package bcryptjs. Lembrar de instalar os @types sempre 
como dependencias de desenvolvimento usando a flag -D.
Criptografar uma senha com o bcryptjs é muito simples. Basta usar a função hash e passar
como parametros a string que quer criptografar e o salt, que é um parametro para melhorar 
a criptografia